#
# `docker-compose` file used ONLY for hobby deployments.
#
# Please take a look at https://posthog.com/docs/self-host/deploy/hobby
# for more info.
#
version: '3'

services:
    db:
        image: postgres:12-alpine
        restart: on-failure
        environment:
            POSTGRES_USER: posthog
            POSTGRES_DB: posthog
            POSTGRES_PASSWORD: posthog
        volumes:
            - postgres-data:/var/lib/postgresql/data
    redis:
        image: redis:6.2.7-alpine
        restart: on-failure
        command: redis-server --maxmemory-policy allkeys-lru --maxmemory 200mb
    clickhouse:
        #
        # Note: please keep the default version in sync across
        #       `posthog` and the `charts-clickhouse` repos
        #
        image: ${CLICKHOUSE_SERVER_IMAGE:-clickhouse/clickhouse-server:22.3}
        restart: on-failure
        depends_on:
            - kafka
            - zookeeper
        volumes:
            - ./idl:/idl
            - ./docker/clickhouse/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
            - ./docker/clickhouse/config.xml:/etc/clickhouse-server/config.xml
            - ./docker/clickhouse/users.xml:/etc/clickhouse-server/users.xml
            - clickhouse-data:/var/lib/clickhouse
    zookeeper:
        image: zookeeper:3.7.0
        restart: on-failure
        volumes:
            - zookeeper-datalog:/datalog
            - zookeeper-data:/data
            - zookeeper-logs:/logs
    kafka:
        image: bitnami/kafka:2.8.1-debian-10-r99
        restart: on-failure
        depends_on:
            - zookeeper
        environment:
            KAFKA_BROKER_ID: 1001
            KAFKA_CFG_RESERVED_BROKER_MAX_ID: 1001
            KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
            KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
            KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
            ALLOW_PLAINTEXT_LISTENER: 'true'

    worker: &worker
        image: posthog/posthog:latest-release
        command: ./bin/docker-worker-celery --with-scheduler
        restart: on-failure
        environment:
            SENTRY_DSN: 'https://public@sentry.example.com/1'
            SITE_URL: http://test990.whizzygeeks.com
            DISABLE_SECURE_SSL_REDIRECT: 'true'
            IS_BEHIND_PROXY: 'true'
            DATABASE_URL: 'postgres://posthog:posthog@db:5432/posthog'
            CLICKHOUSE_HOST: 'clickhouse'
            CLICKHOUSE_DATABASE: 'posthog'
            CLICKHOUSE_SECURE: 'false'
            CLICKHOUSE_VERIFY: 'false'
            KAFKA_URL: 'kafka://kafka'
            REDIS_URL: 'redis://redis:6379/'
            SECRET_KEY: 0d541d582350d5de69a856136177a2c1ee23532db0246b9f954f7c70
            PGHOST: db
            PGUSER: posthog
            PGPASSWORD: posthog
            DEPLOYMENT: hobby
        depends_on:
            - db
            - redis
            - clickhouse
            - kafka
            - object_storage
    web:
        <<: *worker
        command: /compose/start
        restart: on-failure
        ports:
                - "8023:8000"
        volumes:
            - ./compose:/compose
#    nginx:
#        image: nginx:1.15-alpine
#        ports:
#                - "9080:80"
#                - "9443:443"
#        volumes:
#                - ./nginx/nginx/sites-available/testposthog.conf:/etc/nginx/conf.d/testposthog.conf
#                - ./nginx/live/test990.whizzygeeks.com/:/etc/test990.whizzygeeks.com
#        depends_on:
#                - web
    plugins:
        image: posthog/posthog:latest-release
        command: ./bin/plugin-server --no-restart-loop
        restart: on-failure
        environment:
            DATABASE_URL: 'postgres://posthog:posthog@db:5432/posthog'
            KAFKA_HOSTS: 'kafka:9092'
            REDIS_URL: 'redis://redis:6379/'
            CLICKHOUSE_HOST: 'clickhouse'
        depends_on:
            - db
            - redis
            - clickhouse
            - kafka
            - object_storage

    object_storage:
        image: minio/minio:RELEASE.2022-09-17T00-09-45Z.fips
        restart: on-failure
        volumes:
            - object_storage:/data
        environment:
            MINIO_ROOT_USER: object_storage_root_user
            MINIO_ROOT_PASSWORD: object_storage_root_password
        entrypoint: sh
        command: -c 'mkdir -p /data/posthog && minio server --address ":19000" --console-address ":19001" /data' # create the 'posthog' bucket before starting the service

    asyncmigrationscheck:
        <<: *worker
        command: python manage.py run_async_migrations --check
        restart: 'no'
        scale: 0

volumes:
    zookeeper-data:
    zookeeper-datalog:
    zookeeper-logs:
    object_storage:
    postgres-data:
    clickhouse-data:
